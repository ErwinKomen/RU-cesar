# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-03-01 10:10
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Corpus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of this corpus')),
                ('lng', models.CharField(choices=[('0', '-'), ('1', 'N/A')], help_text='Sorry, no help available for corpus.language', max_length=5, verbose_name='Language of the texts')),
                ('eth', models.CharField(choices=[('0', '-'), ('1', 'N/A')], help_text='Sorry, no help available for corpus.ethnologue', max_length=5, verbose_name='Ethnologue 3-letter code of the text langauge')),
                ('status', models.CharField(choices=[('0', '-'), ('1', 'N/A')], help_text='Sorry, no help available for corpus.status', max_length=5, verbose_name="The status (e.g. 'hidden')")),
            ],
        ),
        migrations.CreateModel(
            name='Download',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('format', models.CharField(choices=[('0', '-'), ('1', 'N/A')], help_text='Sorry, no help available for corpus.format', max_length=5, verbose_name='Format for this corpus (part)')),
                ('url', models.URLField(verbose_name='Link to download this corpus (part)')),
            ],
        ),
        migrations.CreateModel(
            name='FieldChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(max_length=50)),
                ('english_name', models.CharField(max_length=100)),
                ('dutch_name', models.CharField(max_length=100)),
                ('machine_value', models.IntegerField(help_text='The actual numeric value stored in the database. Created automatically.')),
            ],
            options={
                'ordering': ['field', 'machine_value'],
            },
        ),
        migrations.CreateModel(
            name='Grouping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(verbose_name='Definition of this grouping in Xquery')),
            ],
        ),
        migrations.CreateModel(
            name='GroupingName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of this grouping')),
                ('descr', models.TextField(verbose_name='Description of this grouping')),
            ],
        ),
        migrations.CreateModel(
            name='HelpChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(max_length=200)),
                ('searchable', models.BooleanField(default=False)),
                ('display_name', models.CharField(max_length=50)),
                ('help_url', models.URLField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='Metavar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of this meta variable')),
                ('hidden', models.BooleanField(default=False, verbose_name='(Not sure what this is for)')),
            ],
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of this corpus part')),
                ('dir', models.CharField(default='/', max_length=200, verbose_name='Sub directory where this corpus part resides')),
                ('descr', models.TextField(default='(Put your description here)', verbose_name='Full name and description of this corpus')),
                ('url', models.URLField(verbose_name='Link to the (original) release of this corpus (part)')),
                ('corpus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='browser.Corpus')),
                ('metavar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='browser.Metavar')),
            ],
        ),
        migrations.CreateModel(
            name='Tagset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('definition', models.CharField(max_length=200, verbose_name='Definition of this tagset variable')),
                ('metavar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='browser.Metavar')),
            ],
        ),
        migrations.CreateModel(
            name='TagsetName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of this tagset variable')),
            ],
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loc', models.CharField(choices=[('0', '-'), ('1', 'N/A')], help_text='Sorry, no help available for variable.loc', max_length=5, verbose_name='Type of this variable')),
                ('value', models.TextField(verbose_name='Value of this variable in Xquery')),
                ('metavar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='browser.Metavar')),
            ],
        ),
        migrations.CreateModel(
            name='VariableName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of this variable')),
                ('descr', models.TextField(verbose_name='Description of this variable')),
                ('type', models.CharField(choices=[('0', '-'), ('1', 'N/A')], help_text='Sorry, no help available for variable.type', max_length=5, verbose_name='Type of this variable')),
            ],
        ),
        migrations.AddField(
            model_name='variable',
            name='name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='browser.VariableName'),
        ),
        migrations.AddField(
            model_name='tagset',
            name='title',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='browser.TagsetName'),
        ),
        migrations.AddField(
            model_name='grouping',
            name='metavar',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='browser.Metavar'),
        ),
        migrations.AddField(
            model_name='grouping',
            name='name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='browser.GroupingName'),
        ),
        migrations.AddField(
            model_name='download',
            name='part',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='browser.Part'),
        ),
        migrations.AddField(
            model_name='corpus',
            name='metavar',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='browser.Metavar'),
        ),
    ]
